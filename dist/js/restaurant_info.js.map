{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","src/js/dbhelper.js","src/js/dbpromise.js","src/js/restaurant_info.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"restaurant_info.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      // Don't create iterateKeyCursor if openKeyCursor doesn't exist.\n      if (!(funcName in Constructor.prototype)) return;\n\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      if (request) {\n        request.onupgradeneeded = function(event) {\n          if (upgradeCallback) {\n            upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n          }\n        };\n      }\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","import dbPromise from './dbpromise';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nexport default class DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 8000\r\n    return `http://localhost:${port}/data/restaurants.json`;\r\n  }\r\n\r\n  /**\r\n   * API URL.\r\n   */\r\n  static get API_URL() {\r\n    const port = 1337 \r\n    return `http://localhost:${port}`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open('GET', `${DBHelper.API_URL}/restaurants`);\r\n    xhr.onload = () => {\r\n      if (xhr.status === 200) { // Got a success response from server!\r\n        const restaurants = JSON.parse(xhr.responseText);\r\n        callback(null, restaurants);\r\n      } else { // Oops!. Got an error from server.\r\n        const error = (`Request failed. Returned status of ${xhr.status}`);\r\n        callback(error, null);\r\n      }\r\n    };\r\n    xhr.send();\r\n  }\r\n\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.API_URL}/restaurants/${id}`).then(response => {\r\n      if(!response.ok) return Promise.reject(\"Restaurant couldn't be fetched from network\");\r\n      return response.json();\r\n    }).then(fetchedRestaurant => {\r\n      // if restaurant could be fetched from network\r\n      return callback(null, fetchedRestaurant);\r\n    }).catch(networkError => {\r\n      // if restaurant could not be fetched from network\r\n      return callback(networkError, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let url = `/img/${restaurant.photograph || restaurant.id}.jpg`;\r\n    return url\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {\r\n        title: restaurant.name,\r\n        alt: restaurant.name,\r\n        url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(map);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n","import idb from 'idb';\n\nconst dbPromise = {\n // creation and updating of database happens here.\n db: idb.open('restaurant-reviews-db', 1, function (upgradeDb) {\n   switch (upgradeDb.oldVersion) {\n     case 0:\n       upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\n   }\n }),\n\n /**\n  * Save a restaurant or array of restaurants into idb, using promises.\n  */\n putRestaurants(restaurants) {\n   if (!restaurants.push) restaurants = [restaurants];\n   return this.db.then(db => {\n     const store = db.transaction('restaurants', 'readwrite').objectStore('restaurants');\n     Promise.all(restaurants.map(networkRestaurant => {\n       return store.get(networkRestaurant.id).then(idbRestaurant => {\n         if (!idbRestaurant || networkRestaurant.updatedAt > idbRestaurant.updatedAt) {\n           return store.put(networkRestaurant);  \n         } \n       });\n     })).then(function () {\n       return store.complete;\n     });\n   });\n },\n\n /**\n  * Get a restaurant, by its id, or all stored restaurants in idb using promises.\n  * If no argument is passed, all restaurants will returned.\n  */\n getRestaurants(id = undefined) {\n   return this.db.then(db => {\n     const store = db.transaction('restaurants').objectStore('restaurants');\n     if (id) return store.get(Number(id));\n     return store.getAll();\n   });\n },\n\n};\n\nexport default dbPromise;","import DBHelper from './dbhelper';\n// import './register-sw';\n\nlet restaurant;\nvar newMap;\n\n/**\n * Initialize map as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {  \n  initMap();\n});\n\n/**\n * Initialize leaflet map\n */\nconst initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {      \n      newMap = L.map('map', {\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\n        zoom: 16,\n        scrollWheelZoom: false\n      });\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\n        mapboxToken: 'pk.eyJ1Ijoia2V2aW5maXR6aGVucnkiLCJhIjoiY2pqYWJ5MDY4MWhlbzNsb2kzdmxlNXNlZCJ9.5DaunZA3c27smha6yj1Njw',\n        maxZoom: 18,\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\n          'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n        id: 'mapbox.streets'    \n      }).addTo(newMap);\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, newMap);\n    }\n  });\n}  \n \n/* window.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n} */\n\n/**\n * Get current restaurant from page URL.\n */\nconst fetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n/**\n * Create restaurant HTML and add it to the webpage\n */\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img'\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = `${restaurant.name} in ${restaurant.neighborhood}`;\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n/**\n * Create restaurant operating hours HTML table and add it to the webpage.\n */\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n/**\n * Create all reviews HTML and add them to the webpage.\n */\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n/**\n * Create review HTML and add it to the webpage.\n */\nconst createReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n/**\n * Add restaurant name to the breadcrumb navigation menu\n */\nconst fillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * Get a parameter by name from page URL.\n */\nconst getParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}